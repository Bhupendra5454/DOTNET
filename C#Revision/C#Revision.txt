=================================================================================================================================================================================
19-July-2024
------------
1)Readonly - readonly can be initialized either at declaration or within a constructor,readonly fields are useful when you have data that should not change after initialization.
  const - const must be initialized at declaration,value cannot be changed once initialized eg(PI)

2)this keyword - this keyword is used to refer to the current instance of the class,
                 it is particularly useful in scenarios like constructor chaining, accessing instance members, and extension methods.

3)Constructor chaining - Constructor chaining in C# refers to the technique where one constructor can call another constructor within the same class.
                         This allows constructors to reuse initialization logic and avoid code duplication, promoting cleaner and more maintainable code.

4)Extension Method - Extension method can be implemented by Passing object as (this Object obj1) as Paramater to method of differnt class(Class 2)
                     that you want to use in original calss(Class 1).

5)Object initializers - Object initializers let you assign values to any accessible fields or properties of an object,
                        at creation time without having to invoke a constructor followed by lines of assignment statements.

6)Indexer - Indexers are particularly useful in scenarios where you want to treat instances of a class like arrays or collections. 

7)Singleton - (Singleton is an design pattern that ensurs tha only single instance is created for a class)
              Only one object is created and shared with another functions throughout application execution.
 
8)Static veriable - A variable shared across all instances of a class, initialized once and accessible using the class name rather than instances. 

9)Instance veriable -  Each instance of a class has its own set of variables, initialized when the object is created and accessed using the instance of the class.

10)Ref , out - ref passes parameters by reference, allowing modifications to affect the original variable; out designates output parameters,
               useful for returning multiple values from a method.

11)Out of scope,in scope -  Refers to whether a variable or entity is accessible within a specific block of code (in scope) or not (out of scope),
                            based on its declaration and the current execution context.
=====================================================================================================================================================================================
22-July-2024
-------------
12)Inheritance - Inheritance in object-oriented programming allows one class (subclass/derived class) to inherit behaviors and properties from another class (superclass/base class),
                 promoting code reuse and hierarchical organization of classes.

13)Polymorphism - Polymorphism enables objects of different classes to be treated as objects of a common superclass.
                  It allows methods to be defined in multiple forms, facilitating flexibility and the ability to implement methods specific to each class.
 
14)Shadowing - Shadowing in C# involves a subclass hiding a superclass member with the same name using the new keyword,
               contrary to polymorphism where method overriding with override ensures subclass-specific implementations are invoked through superclass references.
 
15)Concrete class - A concrete class is a regular class that can be instantiated to create objects.
                    It provides complete implementation for all its methods and does not contain any abstract methods.

16)Abstract class - An abstract class cannot be instantiated on its own; it serves as a blueprint for other classes to inherit from.
                    It may contain abstract methods (methods without a body) that subclasses must implement.

17)Interface - An interface in C# defines a contract of methods, properties, events, or indexers that implementing classes must provide.
               It enables multiple inheritance and promotes loose coupling by allowing unrelated classes to implement the same set of behaviors.

18)What is design pattern - Design patterns in C# are standardized solutions to common problems in software design.
                            They represent best practices and reusable templates that help developers solve recurring design challenges efficiently.

19)Why Design pattern - Standardized Solutions, Common Vocabulary, Code Reusability, Scalability and Maintainability, Performance Optimization

20)Advantages of design pattern - Proven Solutions, Saves Time, Improves Code Quality, Encourages Best Practices.
=====================================================================================================================================================================================
23-July-2024
------------
